import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { APIResponse, PaginatedResponse } from '../types';\n\n// Create axios instance with default config\nconst api: AxiosInstance = axios.create({\n  baseURL: '/api',\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle common errors\napi.interceptors.response.use(\n  (response: AxiosResponse) => {\n    return response;\n  },\n  (error) => {\n    if (error.response?.status === 401) {\n      // Handle unauthorized - redirect to login\n      localStorage.removeItem('auth_token');\n      window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Generic API methods\nexport const apiClient = {\n  get: async <T = any>(url: string, config?: AxiosRequestConfig): Promise<APIResponse<T>> => {\n    const response = await api.get(url, config);\n    return response.data;\n  },\n\n  post: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<APIResponse<T>> => {\n    const response = await api.post(url, data, config);\n    return response.data;\n  },\n\n  put: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<APIResponse<T>> => {\n    const response = await api.put(url, data, config);\n    return response.data;\n  },\n\n  patch: async <T = any>(url: string, data?: any, config?: AxiosRequestConfig): Promise<APIResponse<T>> => {\n    const response = await api.patch(url, data, config);\n    return response.data;\n  },\n\n  delete: async <T = any>(url: string, config?: AxiosRequestConfig): Promise<APIResponse<T>> => {\n    const response = await api.delete(url, config);\n    return response.data;\n  },\n\n  // Paginated requests\n  getPaginated: async <T = any>(\n    url: string,\n    params?: { page?: number; limit?: number; [key: string]: any },\n    config?: AxiosRequestConfig\n  ): Promise<PaginatedResponse<T>> => {\n    const response = await api.get(url, { ...config, params });\n    return response.data;\n  },\n\n  // File upload\n  upload: async <T = any>(\n    url: string,\n    file: File,\n    onProgress?: (progress: number) => void,\n    config?: AxiosRequestConfig\n  ): Promise<APIResponse<T>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    const response = await api.post(url, formData, {\n      ...config,\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        ...config?.headers,\n      },\n      onUploadProgress: (progressEvent) => {\n        if (onProgress && progressEvent.total) {\n          const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n          onProgress(progress);\n        }\n      },\n    });\n\n    return response.data;\n  },\n\n  // Download file\n  download: async (url: string, filename?: string, config?: AxiosRequestConfig): Promise<void> => {\n    const response = await api.get(url, {\n      ...config,\n      responseType: 'blob',\n    });\n\n    const blob = new Blob([response.data]);\n    const downloadUrl = window.URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.href = downloadUrl;\n    link.download = filename || 'download';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    window.URL.revokeObjectURL(downloadUrl);\n  },\n};\n\nexport default api;\n"