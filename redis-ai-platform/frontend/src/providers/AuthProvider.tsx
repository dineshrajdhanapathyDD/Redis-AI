import React, { createContext, useContext, useEffect, ReactNode } from 'react';\nimport { useAuthStore } from '../store';\nimport { User } from '../types';\n\ninterface AuthContextType {\n  user: User | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  logout: () => void;\n  updateUser: (user: Partial<User>) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\n  const {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n    setLoading,\n  } = useAuthStore();\n\n  useEffect(() => {\n    // Check for existing token on app start\n    const token = localStorage.getItem('auth_token');\n    if (token && !isAuthenticated) {\n      // Validate token with server\n      validateToken(token);\n    }\n  }, [isAuthenticated]);\n\n  const validateToken = async (token: string) => {\n    setLoading(true);\n    try {\n      // Mock token validation - replace with actual API call\n      if (token === 'mock-jwt-token') {\n        // Token is valid, user is already set from persisted state\n        setLoading(false);\n      } else {\n        // Invalid token\n        logout();\n      }\n    } catch (error) {\n      console.error('Token validation failed:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const contextValue: AuthContextType = {\n    user,\n    isAuthenticated,\n    isLoading,\n    login,\n    logout,\n    updateUser,\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"