import React, { createContext, useContext, useEffect, ReactNode } from 'react';\nimport wsClient from '../lib/websocket';\nimport { useWebSocketStore, useUIStore } from '../store';\nimport { WebSocketConnection } from '../types';\n\ninterface WebSocketContextType {\n  connection: WebSocketConnection;\n  isConnected: boolean;\n  emit: (event: string, data?: any) => void;\n  on: (event: string, callback: (data: any) => void) => void;\n  off: (event: string, callback?: (data: any) => void) => void;\n  subscribe: (channel: string, params?: any) => void;\n  unsubscribe: (channel: string) => void;\n}\n\nconst WebSocketContext = createContext<WebSocketContextType | undefined>(undefined);\n\ninterface WebSocketProviderProps {\n  children: ReactNode;\n}\n\nexport const WebSocketProvider: React.FC<WebSocketProviderProps> = ({ children }) => {\n  const { connection, updateConnection, addMessage } = useWebSocketStore();\n  const { addNotification } = useUIStore();\n\n  useEffect(() => {\n    // Set up WebSocket event listeners\n    const handleConnectionStatus = (status: WebSocketConnection) => {\n      updateConnection(status);\n      \n      if (status.connected) {\n        addNotification({\n          type: 'success',\n          title: 'Connected',\n          message: 'Real-time connection established',\n          duration: 3000,\n        });\n      } else if (status.reconnecting) {\n        addNotification({\n          type: 'warning',\n          title: 'Reconnecting',\n          message: 'Attempting to restore connection...',\n          duration: 0, // Don't auto-dismiss\n        });\n      }\n    };\n\n    const handleConnectionError = (error: any) => {\n      console.error('WebSocket connection error:', error);\n      addNotification({\n        type: 'error',\n        title: 'Connection Error',\n        message: 'Failed to establish real-time connection',\n        duration: 5000,\n      });\n    };\n\n    const handleConnectionFailed = (data: any) => {\n      addNotification({\n        type: 'error',\n        title: 'Connection Failed',\n        message: `Failed to reconnect after ${data.attempts} attempts`,\n        duration: 0,\n        actions: [\n          {\n            label: 'Retry',\n            action: () => wsClient.reconnect(),\n            style: 'primary',\n          },\n        ],\n      });\n    };\n\n    // System event handlers\n    const handleSystemAlert = (alert: any) => {\n      addNotification({\n        type: alert.type || 'info',\n        title: alert.title || 'System Alert',\n        message: alert.message,\n        duration: alert.type === 'critical' ? 0 : 10000,\n      });\n    };\n\n    const handleWorkspaceUpdate = (update: any) => {\n      addMessage({\n        type: 'workspace_update',\n        data: update,\n        timestamp: new Date().toISOString(),\n      });\n    };\n\n    const handleLearningUpdate = (update: any) => {\n      addMessage({\n        type: 'learning_update',\n        data: update,\n        timestamp: new Date().toISOString(),\n      });\n    };\n\n    const handleSearchResults = (results: any) => {\n      addMessage({\n        type: 'search_results',\n        data: results,\n        timestamp: new Date().toISOString(),\n      });\n    };\n\n    const handleAIRoutingUpdate = (update: any) => {\n      addMessage({\n        type: 'ai_routing_update',\n        data: update,\n        timestamp: new Date().toISOString(),\n      });\n    };\n\n    const handleAdaptiveUIUpdate = (update: any) => {\n      addMessage({\n        type: 'adaptive_ui_update',\n        data: update,\n        timestamp: new Date().toISOString(),\n      });\n    };\n\n    // Register event listeners\n    wsClient.on('connection:status', handleConnectionStatus);\n    wsClient.on('connection:error', handleConnectionError);\n    wsClient.on('connection:failed', handleConnectionFailed);\n    wsClient.on('system_alert', handleSystemAlert);\n    wsClient.on('workspace_update', handleWorkspaceUpdate);\n    wsClient.on('learning_update', handleLearningUpdate);\n    wsClient.on('search:results', handleSearchResults);\n    wsClient.on('ai_routing_update', handleAIRoutingUpdate);\n    wsClient.on('adaptive_ui_update', handleAdaptiveUIUpdate);\n\n    // Cleanup on unmount\n    return () => {\n      wsClient.off('connection:status', handleConnectionStatus);\n      wsClient.off('connection:error', handleConnectionError);\n      wsClient.off('connection:failed', handleConnectionFailed);\n      wsClient.off('system_alert', handleSystemAlert);\n      wsClient.off('workspace_update', handleWorkspaceUpdate);\n      wsClient.off('learning_update', handleLearningUpdate);\n      wsClient.off('search:results', handleSearchResults);\n      wsClient.off('ai_routing_update', handleAIRoutingUpdate);\n      wsClient.off('adaptive_ui_update', handleAdaptiveUIUpdate);\n    };\n  }, [updateConnection, addMessage, addNotification]);\n\n  const contextValue: WebSocketContextType = {\n    connection,\n    isConnected: connection.connected,\n    emit: wsClient.emit.bind(wsClient),\n    on: wsClient.on.bind(wsClient),\n    off: wsClient.off.bind(wsClient),\n    subscribe: wsClient.subscribe.bind(wsClient),\n    unsubscribe: wsClient.unsubscribe.bind(wsClient),\n  };\n\n  return (\n    <WebSocketContext.Provider value={contextValue}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n};\n\nexport const useWebSocket = (): WebSocketContextType => {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n};\n"