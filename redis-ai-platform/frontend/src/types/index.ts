// User and Authentication Types\nexport interface User {\n  id: string;\n  email: string;\n  name: string;\n  avatar?: string;\n  role: 'admin' | 'user' | 'viewer';\n  preferences: UserPreferences;\n  createdAt: string;\n  lastActiveAt: string;\n}\n\nexport interface UserPreferences {\n  theme: 'light' | 'dark' | 'auto';\n  language: string;\n  notifications: NotificationSettings;\n  accessibility: AccessibilitySettings;\n  ui: UIPreferences;\n}\n\nexport interface NotificationSettings {\n  email: boolean;\n  push: boolean;\n  workspace: boolean;\n  system: boolean;\n}\n\nexport interface AccessibilitySettings {\n  highContrast: boolean;\n  largeText: boolean;\n  reducedMotion: boolean;\n  screenReader: boolean;\n}\n\nexport interface UIPreferences {\n  sidebarCollapsed: boolean;\n  compactMode: boolean;\n  showPreview: boolean;\n  defaultView: 'grid' | 'list';\n}\n\n// Search Types\nexport interface SearchQuery {\n  query: string;\n  type: 'text' | 'image' | 'audio' | 'code' | 'multi-modal';\n  filters?: SearchFilters;\n  limit?: number;\n  offset?: number;\n}\n\nexport interface SearchFilters {\n  dateRange?: {\n    start: string;\n    end: string;\n  };\n  contentType?: string[];\n  source?: string[];\n  tags?: string[];\n  workspace?: string;\n}\n\nexport interface SearchResult {\n  id: string;\n  type: 'text' | 'image' | 'audio' | 'code';\n  title: string;\n  content: string;\n  snippet: string;\n  score: number;\n  metadata: Record<string, any>;\n  source: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  workspace?: string;\n}\n\nexport interface SearchSuggestion {\n  text: string;\n  type: 'query' | 'filter' | 'completion';\n  score: number;\n  metadata?: Record<string, any>;\n}\n\n// Workspace Types\nexport interface Workspace {\n  id: string;\n  name: string;\n  description: string;\n  type: 'personal' | 'team' | 'public';\n  owner: string;\n  collaborators: WorkspaceCollaborator[];\n  settings: WorkspaceSettings;\n  knowledgeGraph: KnowledgeGraph;\n  createdAt: string;\n  updatedAt: string;\n  lastActivity: string;\n}\n\nexport interface WorkspaceCollaborator {\n  userId: string;\n  role: 'owner' | 'admin' | 'editor' | 'viewer';\n  permissions: string[];\n  joinedAt: string;\n  lastActiveAt: string;\n}\n\nexport interface WorkspaceSettings {\n  visibility: 'private' | 'team' | 'public';\n  allowInvites: boolean;\n  requireApproval: boolean;\n  aiAssistance: boolean;\n  autoSave: boolean;\n  versionHistory: boolean;\n}\n\nexport interface KnowledgeGraph {\n  nodes: KnowledgeNode[];\n  edges: KnowledgeEdge[];\n  lastUpdated: string;\n}\n\nexport interface KnowledgeNode {\n  id: string;\n  type: 'concept' | 'document' | 'insight' | 'question' | 'answer';\n  title: string;\n  content: string;\n  metadata: Record<string, any>;\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  tags: string[];\n  embedding?: number[];\n}\n\nexport interface KnowledgeEdge {\n  id: string;\n  source: string;\n  target: string;\n  type: 'relates_to' | 'depends_on' | 'contradicts' | 'supports' | 'derived_from';\n  weight: number;\n  metadata: Record<string, any>;\n  createdAt: string;\n}\n\n// AI and Model Types\nexport interface AIModel {\n  id: string;\n  name: string;\n  provider: 'openai' | 'anthropic' | 'local' | 'huggingface';\n  type: 'text' | 'image' | 'audio' | 'code' | 'multimodal';\n  capabilities: string[];\n  performance: ModelPerformance;\n  pricing: ModelPricing;\n  status: 'available' | 'busy' | 'offline' | 'maintenance';\n  lastUpdated: string;\n}\n\nexport interface ModelPerformance {\n  latency: number; // ms\n  accuracy: number; // 0-1\n  throughput: number; // requests/second\n  errorRate: number; // 0-1\n  uptime: number; // 0-1\n  lastMeasured: string;\n}\n\nexport interface ModelPricing {\n  inputCost: number; // per token/unit\n  outputCost: number; // per token/unit\n  currency: string;\n  unit: string;\n}\n\nexport interface AIRequest {\n  id: string;\n  prompt: string;\n  context?: any;\n  requirements?: AIRequirements;\n  userId: string;\n  workspaceId?: string;\n  createdAt: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  response?: AIResponse;\n}\n\nexport interface AIRequirements {\n  maxLatency?: number;\n  minAccuracy?: number;\n  maxCost?: number;\n  preferredModels?: string[];\n  excludeModels?: string[];\n}\n\nexport interface AIResponse {\n  content: string;\n  model: string;\n  confidence: number;\n  latency: number;\n  cost: number;\n  metadata: Record<string, any>;\n  createdAt: string;\n}\n\n// Code Intelligence Types\nexport interface CodeFile {\n  id: string;\n  path: string;\n  name: string;\n  extension: string;\n  content: string;\n  language: string;\n  size: number;\n  lastModified: string;\n  analysis?: CodeAnalysis;\n}\n\nexport interface CodeAnalysis {\n  complexity: number;\n  maintainability: number;\n  testCoverage: number;\n  issues: CodeIssue[];\n  suggestions: CodeSuggestion[];\n  dependencies: string[];\n  exports: string[];\n  functions: CodeFunction[];\n  classes: CodeClass[];\n}\n\nexport interface CodeIssue {\n  id: string;\n  type: 'error' | 'warning' | 'info' | 'suggestion';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  message: string;\n  line: number;\n  column: number;\n  rule: string;\n  fixable: boolean;\n  suggestion?: string;\n}\n\nexport interface CodeSuggestion {\n  id: string;\n  type: 'refactor' | 'optimize' | 'style' | 'security' | 'performance';\n  title: string;\n  description: string;\n  confidence: number;\n  impact: 'low' | 'medium' | 'high';\n  before: string;\n  after: string;\n  line: number;\n}\n\nexport interface CodeFunction {\n  name: string;\n  parameters: string[];\n  returnType: string;\n  line: number;\n  complexity: number;\n  documentation?: string;\n}\n\nexport interface CodeClass {\n  name: string;\n  methods: CodeFunction[];\n  properties: string[];\n  line: number;\n  documentation?: string;\n}\n\n// Content Types\nexport interface ContentItem {\n  id: string;\n  type: 'article' | 'post' | 'page' | 'email' | 'social';\n  title: string;\n  content: string;\n  format: 'markdown' | 'html' | 'plain';\n  status: 'draft' | 'review' | 'published' | 'archived';\n  platform?: string;\n  brand: BrandGuidelines;\n  performance?: ContentPerformance;\n  variations: ContentVariation[];\n  createdBy: string;\n  createdAt: string;\n  updatedAt: string;\n  publishedAt?: string;\n}\n\nexport interface BrandGuidelines {\n  tone: string;\n  voice: string;\n  style: string;\n  keywords: string[];\n  restrictions: string[];\n  colors: string[];\n  fonts: string[];\n}\n\nexport interface ContentPerformance {\n  views: number;\n  engagement: number;\n  shares: number;\n  conversions: number;\n  sentiment: number; // -1 to 1\n  lastMeasured: string;\n}\n\nexport interface ContentVariation {\n  id: string;\n  platform: string;\n  content: string;\n  adaptations: string[];\n  performance?: ContentPerformance;\n  createdAt: string;\n}\n\n// System and Monitoring Types\nexport interface SystemMetrics {\n  timestamp: string;\n  performance: PerformanceMetrics;\n  resources: ResourceMetrics;\n  connections: ConnectionMetrics;\n  errors: ErrorMetrics;\n}\n\nexport interface PerformanceMetrics {\n  responseTime: number;\n  throughput: number;\n  errorRate: number;\n  availability: number;\n}\n\nexport interface ResourceMetrics {\n  cpuUsage: number;\n  memoryUsage: number;\n  diskUsage: number;\n  networkIO: number;\n}\n\nexport interface ConnectionMetrics {\n  websocket: number;\n  http: number;\n  redis: number;\n  database: number;\n}\n\nexport interface ErrorMetrics {\n  total: number;\n  byType: Record<string, number>;\n  byEndpoint: Record<string, number>;\n  recent: SystemError[];\n}\n\nexport interface SystemError {\n  id: string;\n  type: string;\n  message: string;\n  stack?: string;\n  endpoint?: string;\n  userId?: string;\n  timestamp: string;\n  resolved: boolean;\n}\n\nexport interface SystemAlert {\n  id: string;\n  type: 'info' | 'warning' | 'error' | 'critical';\n  title: string;\n  message: string;\n  source: string;\n  metadata: Record<string, any>;\n  acknowledged: boolean;\n  resolvedAt?: string;\n  createdAt: string;\n}\n\n// WebSocket Types\nexport interface WebSocketMessage {\n  type: string;\n  payload: any;\n  timestamp: string;\n  id?: string;\n}\n\nexport interface WebSocketConnection {\n  connected: boolean;\n  reconnecting: boolean;\n  lastConnected?: string;\n  connectionId?: string;\n  subscriptions: Set<string>;\n}\n\n// UI State Types\nexport interface UIState {\n  sidebarOpen: boolean;\n  theme: 'light' | 'dark';\n  loading: boolean;\n  error?: string;\n  notifications: Notification[];\n}\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  duration?: number;\n  actions?: NotificationAction[];\n  createdAt: string;\n}\n\nexport interface NotificationAction {\n  label: string;\n  action: () => void;\n  style?: 'primary' | 'secondary';\n}\n\n// API Response Types\nexport interface APIResponse<T = any> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n  timestamp: string;\n}\n\nexport interface PaginatedResponse<T = any> {\n  data: T[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n    hasNext: boolean;\n    hasPrev: boolean;\n  };\n}\n\n// Form Types\nexport interface FormField {\n  name: string;\n  label: string;\n  type: 'text' | 'email' | 'password' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'file';\n  required?: boolean;\n  placeholder?: string;\n  options?: { label: string; value: string }[];\n  validation?: {\n    pattern?: string;\n    minLength?: number;\n    maxLength?: number;\n    min?: number;\n    max?: number;\n  };\n}\n\nexport interface FormState {\n  values: Record<string, any>;\n  errors: Record<string, string>;\n  touched: Record<string, boolean>;\n  isSubmitting: boolean;\n  isValid: boolean;\n}\n"