import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport {\n  Search,\n  Filter,\n  Upload,\n  Image,\n  Music,\n  Code,\n  FileText,\n  Clock,\n  Star,\n  ExternalLink,\n  Mic,\n  Camera,\n} from 'lucide-react';\nimport { useSearchStore } from '../store';\nimport { useWebSocket } from '../providers/WebSocketProvider';\nimport { LoadingSpinner } from '../components/ui/LoadingSpinner';\n\nconst SearchTypeSelector: React.FC<{\n  selectedType: string;\n  onTypeChange: (type: string) => void;\n}> = ({ selectedType, onTypeChange }) => {\n  const types = [\n    { id: 'multi-modal', label: 'All Content', icon: Search, color: 'bg-primary-100 text-primary-700' },\n    { id: 'text', label: 'Text', icon: FileText, color: 'bg-blue-100 text-blue-700' },\n    { id: 'image', label: 'Images', icon: Image, color: 'bg-green-100 text-green-700' },\n    { id: 'audio', label: 'Audio', icon: Music, color: 'bg-purple-100 text-purple-700' },\n    { id: 'code', label: 'Code', icon: Code, color: 'bg-orange-100 text-orange-700' },\n  ];\n\n  return (\n    <div className=\"flex space-x-2 mb-6\">\n      {types.map((type) => (\n        <button\n          key={type.id}\n          onClick={() => onTypeChange(type.id)}\n          className={`\n            flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-all\n            ${selectedType === type.id\n              ? `${type.color} shadow-sm`\n              : 'bg-secondary-100 text-secondary-600 hover:bg-secondary-200'\n            }\n          `}\n        >\n          <type.icon size={16} />\n          <span>{type.label}</span>\n        </button>\n      ))}\n    </div>\n  );\n};\n\nconst SearchInput: React.FC<{\n  query: string;\n  onQueryChange: (query: string) => void;\n  onSearch: () => void;\n  isLoading: boolean;\n}> = ({ query, onQueryChange, onSearch, isLoading }) => {\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      onSearch();\n    }\n  };\n\n  return (\n    <div className=\"relative mb-6\">\n      <div className=\"relative\">\n        <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n          <Search className=\"h-5 w-5 text-secondary-400\" />\n        </div>\n        <input\n          type=\"text\"\n          value={query}\n          onChange={(e) => onQueryChange(e.target.value)}\n          onKeyPress={handleKeyPress}\n          placeholder=\"Search across text, images, audio, and code...\"\n          className=\"w-full pl-12 pr-32 py-4 text-lg border border-secondary-300 rounded-xl focus:ring-2 focus:ring-primary-500 focus:border-primary-500\"\n          disabled={isLoading}\n        />\n        <div className=\"absolute inset-y-0 right-0 flex items-center space-x-2 pr-4\">\n          <button\n            type=\"button\"\n            className=\"p-2 text-secondary-400 hover:text-secondary-600 rounded-lg hover:bg-secondary-100 transition-colors\"\n            title=\"Voice search\"\n          >\n            <Mic size={18} />\n          </button>\n          <button\n            type=\"button\"\n            className=\"p-2 text-secondary-400 hover:text-secondary-600 rounded-lg hover:bg-secondary-100 transition-colors\"\n            title=\"Image search\"\n          >\n            <Camera size={18} />\n          </button>\n          <button\n            type=\"button\"\n            className=\"p-2 text-secondary-400 hover:text-secondary-600 rounded-lg hover:bg-secondary-100 transition-colors\"\n            title=\"Upload file\"\n          >\n            <Upload size={18} />\n          </button>\n          <button\n            onClick={onSearch}\n            disabled={isLoading || !query.trim()}\n            className=\"btn-primary px-6 py-2\"\n          >\n            {isLoading ? (\n              <LoadingSpinner size=\"sm\" />\n            ) : (\n              'Search'\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst SearchResult: React.FC<{ result: any; index: number }> = ({ result, index }) => {\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'text': return FileText;\n      case 'image': return Image;\n      case 'audio': return Music;\n      case 'code': return Code;\n      default: return FileText;\n    }\n  };\n\n  const getTypeColor = (type: string) => {\n    switch (type) {\n      case 'text': return 'bg-blue-100 text-blue-700';\n      case 'image': return 'bg-green-100 text-green-700';\n      case 'audio': return 'bg-purple-100 text-purple-700';\n      case 'code': return 'bg-orange-100 text-orange-700';\n      default: return 'bg-secondary-100 text-secondary-700';\n    }\n  };\n\n  const TypeIcon = getTypeIcon(result.type);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ delay: index * 0.1 }}\n      className=\"card hover:shadow-md transition-shadow cursor-pointer\"\n    >\n      <div className=\"card-body\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex items-center space-x-3\">\n            <div className={`p-2 rounded-lg ${getTypeColor(result.type)}`}>\n              <TypeIcon size={16} />\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-secondary-900 line-clamp-1\">\n                {result.title}\n              </h3>\n              <p className=\"text-sm text-secondary-500\">\n                {result.source} â€¢ Score: {(result.score * 100).toFixed(1)}%\n              </p>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <button className=\"p-1 text-secondary-400 hover:text-warning-500 transition-colors\">\n              <Star size={16} />\n            </button>\n            <button className=\"p-1 text-secondary-400 hover:text-primary-500 transition-colors\">\n              <ExternalLink size={16} />\n            </button>\n          </div>\n        </div>\n        \n        <p className=\"text-secondary-700 mb-3 line-clamp-3\">\n          {result.snippet}\n        </p>\n        \n        {result.tags && result.tags.length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mb-3\">\n            {result.tags.slice(0, 3).map((tag: string, tagIndex: number) => (\n              <span\n                key={tagIndex}\n                className=\"px-2 py-1 bg-secondary-100 text-secondary-600 text-xs rounded-full\"\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        )}\n        \n        <div className=\"flex items-center justify-between text-xs text-secondary-500\">\n          <div className=\"flex items-center space-x-1\">\n            <Clock size={12} />\n            <span>{new Date(result.createdAt).toLocaleDateString()}</span>\n          </div>\n          <span className=\"capitalize\">{result.type} content</span>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nconst SearchHistory: React.FC = () => {\n  const { history, setQuery } = useSearchStore();\n  \n  if (history.length === 0) return null;\n\n  return (\n    <div className=\"mb-6\">\n      <h3 className=\"text-sm font-medium text-secondary-700 mb-3\">Recent Searches</h3>\n      <div className=\"flex flex-wrap gap-2\">\n        {history.slice(0, 5).map((item, index) => (\n          <button\n            key={index}\n            onClick={() => setQuery(item)}\n            className=\"px-3 py-1 bg-secondary-100 hover:bg-secondary-200 text-secondary-700 text-sm rounded-full transition-colors\"\n          >\n            {item}\n          </button>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport const SearchPage: React.FC = () => {\n  const {\n    query,\n    results,\n    isLoading,\n    setQuery,\n    setResults,\n    setLoading,\n    addToHistory,\n  } = useSearchStore();\n  \n  const [searchType, setSearchType] = useState('multi-modal');\n  const { emit, on, off } = useWebSocket();\n\n  useEffect(() => {\n    const handleSearchResults = (data: any) => {\n      setResults(data.results || []);\n      setLoading(false);\n    };\n\n    on('search:results', handleSearchResults);\n    \n    return () => {\n      off('search:results', handleSearchResults);\n    };\n  }, [on, off, setResults, setLoading]);\n\n  const handleSearch = () => {\n    if (!query.trim()) return;\n    \n    setLoading(true);\n    addToHistory(query);\n    \n    // Emit search via WebSocket\n    emit('search:query', {\n      query,\n      type: searchType,\n      filters: {},\n      limit: 20,\n    });\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-secondary-900 mb-2\">\n          Multi-Modal AI Search\n        </h1>\n        <p className=\"text-secondary-600\">\n          Search across text, images, audio, and code using natural language queries powered by Redis vector search.\n        </p>\n      </div>\n\n      {/* Search Interface */}\n      <div className=\"mb-8\">\n        <SearchTypeSelector\n          selectedType={searchType}\n          onTypeChange={setSearchType}\n        />\n        \n        <SearchInput\n          query={query}\n          onQueryChange={setQuery}\n          onSearch={handleSearch}\n          isLoading={isLoading}\n        />\n        \n        <SearchHistory />\n      </div>\n\n      {/* Results */}\n      <AnimatePresence>\n        {isLoading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"text-center py-12\"\n          >\n            <LoadingSpinner size=\"lg\" text=\"Searching across all content types...\" />\n          </motion.div>\n        )}\n        \n        {!isLoading && results.length > 0 && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"space-y-4\"\n          >\n            <div className=\"flex items-center justify-between mb-6\">\n              <h2 className=\"text-xl font-semibold text-secondary-900\">\n                Search Results ({results.length})\n              </h2>\n              <div className=\"flex items-center space-x-2\">\n                <button className=\"btn-outline btn-sm\">\n                  <Filter size={16} className=\"mr-2\" />\n                  Filters\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"grid gap-4\">\n              {results.map((result, index) => (\n                <SearchResult key={result.id} result={result} index={index} />\n              ))}\n            </div>\n          </motion.div>\n        )}\n        \n        {!isLoading && results.length === 0 && query && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"text-center py-12\"\n          >\n            <Search size={48} className=\"mx-auto text-secondary-400 mb-4\" />\n            <h3 className=\"text-lg font-medium text-secondary-900 mb-2\">\n              No results found\n            </h3>\n            <p className=\"text-secondary-600\">\n              Try adjusting your search terms or search type.\n            </p>\n          </motion.div>\n        )}\n        \n        {!query && !isLoading && (\n          <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            className=\"text-center py-12\"\n          >\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-8\">\n              {[\n                { icon: FileText, label: 'Text Documents', color: 'text-blue-500' },\n                { icon: Image, label: 'Images & Media', color: 'text-green-500' },\n                { icon: Music, label: 'Audio Files', color: 'text-purple-500' },\n                { icon: Code, label: 'Source Code', color: 'text-orange-500' },\n              ].map((item, index) => (\n                <motion.div\n                  key={item.label}\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  transition={{ delay: index * 0.1 }}\n                  className=\"p-6 bg-white rounded-lg border border-secondary-200 text-center\"\n                >\n                  <item.icon size={32} className={`mx-auto mb-2 ${item.color}`} />\n                  <p className=\"text-sm font-medium text-secondary-700\">{item.label}</p>\n                </motion.div>\n              ))}\n            </div>\n            \n            <h3 className=\"text-lg font-medium text-secondary-900 mb-2\">\n              Start your multi-modal search\n            </h3>\n            <p className=\"text-secondary-600 mb-4\">\n              Enter a query above to search across all content types simultaneously.\n            </p>\n            \n            <div className=\"text-sm text-secondary-500\">\n              <p>Try searching for:</p>\n              <div className=\"flex justify-center space-x-4 mt-2\">\n                {[\n                  '\"machine learning algorithms\"',\n                  '\"React components\"',\n                  '\"data visualization\"',\n                ].map((example) => (\n                  <button\n                    key={example}\n                    onClick={() => setQuery(example.replace(/\"/g, ''))}\n                    className=\"text-primary-600 hover:text-primary-700 underline\"\n                  >\n                    {example}\n                  </button>\n                ))}\n              </div>\n            </div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n"