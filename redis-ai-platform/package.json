{
  "name": "redis-ai-platform",
  "version": "1.0.0",
  "description": "Innovative AI-powered application using Redis as real-time data layer",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "dev": "tsx watch src/index.ts",
    "start": "node dist/index.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:unit": "jest --testPathPattern=tests/unit",
    "test:integration": "jest tests/integration",
    "test:e2e": "jest --testPathPattern=tests/e2e",
    "test:performance": "jest --testPathPattern=tests/performance",
    "test:ai-quality": "jest --testPathPattern=tests/ai-quality",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "format": "prettier --write \"src/**/*.ts\" \"tests/**/*.ts\" \"docs/**/*.md\"",
    "type-check": "tsc --noEmit",
    "type-check:watch": "tsc --noEmit --watch",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "docker:build": "docker build -t redis-ai-platform .",
    "docker:run": "docker run -p 3000:3000 --env-file .env redis-ai-platform",
    "demo": "tsx tools/interactive-demo.ts",
    "demo:embedding": "tsx src/demo/embedding-demo.ts",
    "demo:search": "tsx src/demo/search-demo.ts",
    "demo:ai-routing": "tsx src/demo/ai-routing-demo.ts",
    "demo:workspace": "tsx src/demo/workspace-demo.ts",
    "demo:performance": "tsx src/demo/performance-demo.ts",
    "demo:monitoring": "tsx src/demo/monitoring-demo.ts",
    "demo:auth": "tsx src/demo/auth-demo.ts",
    "demo:all": "npm run demo:search && npm run demo:ai-routing && npm run demo:workspace && npm run demo:performance",
    "api-test": "tsx tools/api-tester.ts",
    "docs:generate": "tsx tools/documentation-generator.ts",
    "docs:api": "tsx tools/documentation-generator.ts api",
    "docs:services": "tsx tools/documentation-generator.ts services",
    "docs:examples": "tsx tools/documentation-generator.ts examples",
    "docs:all": "tsx tools/documentation-generator.ts all",
    "monitor": "tsx src/demo/monitoring-demo.ts",
    "metrics": "curl -s http://localhost:3000/api/metrics | jq .",
    "health": "curl -s http://localhost:3000/api/health | jq .",
    "health:detailed": "curl -s http://localhost:3000/api/health/detailed | jq .",
    "migrate": "echo 'Running database migrations...' && sleep 1 && echo 'Migrations completed'",
    "seed": "echo 'Seeding database with test data...' && sleep 1 && echo 'Seeding completed'",
    "profile": "node --prof dist/index.js",
    "profile:memory": "node --inspect dist/index.js",
    "memory-usage": "node -e 'console.log(JSON.stringify(process.memoryUsage(), null, 2))'",
    "system-info": "node -e 'console.log(JSON.stringify({node: process.version, platform: process.platform, arch: process.arch, memory: process.memoryUsage()}, null, 2))'",
    "debug-bundle": "npm run system-info && npm run health && npm run metrics",
    "logs": "tail -f logs/app.log 2>/dev/null || echo 'No log file found. Check your logging configuration.'",
    "logs:error": "tail -f logs/error.log 2>/dev/null || echo 'No error log file found.'",
    "report:performance": "echo 'Generating performance report...' && npm run metrics && npm run health:detailed",
    "k8s:deploy": "kubectl apply -f k8s/",
    "k8s:delete": "kubectl delete -f k8s/",
    "k8s:status": "kubectl get pods -n redis-ai-platform",
    "k8s:logs": "kubectl logs -f deployment/redis-ai-api -n redis-ai-platform",
    "backup": "bash scripts/backup.sh",
    "restore": "bash scripts/restore.sh",
    "clean": "rm -rf dist node_modules coverage .nyc_output",
    "clean:logs": "rm -rf logs/*.log",
    "clean:cache": "rm -rf .cache tmp",
    "precommit": "npm run lint && npm run type-check && npm run test:unit",
    "prepare": "npm run build",
    "postinstall": "echo 'Redis AI Platform installed successfully! Run npm run demo to get started.'"
  },
  "keywords": ["redis", "ai", "vector-search", "real-time", "machine-learning"],
  "author": "Redis AI Platform Team",
  "license": "MIT",
  "dependencies": {
    "redis": "^4.6.12",
    "@redis/search": "^1.1.6",
    "@redis/time-series": "^1.0.5",
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "helmet": "^7.1.0",
    "dotenv": "^16.3.1",
    "winston": "^3.11.0",
    "joi": "^17.11.0",
    "jsonwebtoken": "^9.0.2",
    "bcryptjs": "^2.4.3",
    "socket.io": "^4.7.4",
    "graphql": "^16.8.1",
    "apollo-server-express": "^3.12.1",
    "uuid": "^9.0.1"
  },
  "devDependencies": {
    "@types/node": "^20.10.5",
    "@types/express": "^4.17.21",
    "@types/cors": "^2.8.17",
    "@types/jsonwebtoken": "^9.0.5",
    "@types/bcryptjs": "^2.4.6",
    "@types/uuid": "^9.0.7",
    "@types/jest": "^29.5.8",
    "@types/inquirer": "^9.0.7",
    "typescript": "^5.3.3",
    "tsx": "^4.6.2",
    "jest": "^29.7.0",
    "ts-jest": "^29.1.1",
    "@typescript-eslint/eslint-plugin": "^6.14.0",
    "@typescript-eslint/parser": "^6.14.0",
    "eslint": "^8.55.0",
    "prettier": "^3.1.1",
    "nodemon": "^3.0.2",
    "inquirer": "^9.2.12",
    "chalk": "^5.3.0",
    "axios": "^1.6.2",
    "glob": "^10.3.10"
  },
  "engines": {
    "node": ">=18.0.0"
  }
}